---
AWSTemplateFormatVersion: 2010-09-09 
Description: AWS VPC Associated Infra...
Parameters:
  VPC:
    Description: "VPC ID"
    Type: AWS::EC2::VPC::Id
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  # AmiId:
  #   Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
  #   Type: String
  #   Default: ami-062f7200baf2fa504

Resources:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: PublicSubnetA
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: PublicSubnetA
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: PrivateSubnetA
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: PrivateSubnetA
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewaySubnet
      RouteTableId: !Ref PrivateRouteTable
  NATGatewaySubnet:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIPSubnet
        - AllocationId
      SubnetId:
        Ref: PrivateSubnetA
      Tags:
        - Key: Name
          Value: NATGatewaySubnet
  EIPSubnet:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EIPSubnet 
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH traffic in, all traffic out."
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SSHSecurityGroup 
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"          
        - "arn:aws:iam::aws:policy/ReadOnlyAccess"


  # ASGLaunchConfig:
  #   Type: AWS::AutoScaling::LaunchConfiguration
  #   Properties:
  #     ImageId: !Ref AmiId
  #     SecurityGroups:
  #     - Ref: SSHSecurityGroup
  #     InstanceType: t3.xlarge
  #     BlockDeviceMappings:
  #     - DeviceName: "/dev/sdk"
  #       Ebs:
  #         VolumeSize: '100'

  # ASG:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   Properties:
  #     AvailabilityZones:
  #       Fn::GetAZs: ''
  #     LaunchConfigurationName:
  #       Ref: ASGLaunchConfig
  #     MinSize: '3'
  #     MaxSize: '3'
  #     Tags:
  #       - Key: Name
  #         Value: ASGLaunchConfig

  # EC2Instance1:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     InstanceType: t3.large
  #     SubnetId: !Ref PublicSubnetA
  #     SecurityGroupIds:
  #     - !GetAtt SSHSecurityGroup.GroupId
  #     KeyName:
  #       Ref: KeyName
  #     ImageId: !Ref AmiId
  #     Tags:
  #       - Key: Name 
  #         Value: EC2Instance1
  #     UserData:
  #       Fn::Base64:
  #         !Sub |
  #           #!/bin/bash -xe
  #           yum update -y aws-cfn-bootstrap
  #           yum install ansible docker-ce -y 
  #           systemctl restart ansible
  #           systemctl restart docker